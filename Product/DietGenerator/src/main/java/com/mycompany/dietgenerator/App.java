package com.mycompany.dietgenerator;

import FileManager.FileManager;
import javafx.application.Application;
import javafx.fxml.FXMLLoader;
import javafx.scene.Scene;
import javafx.stage.Stage;
import GeneticAlgorithm.Aliment;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;

/**
 * The main class of this program. It is based off of the template which is
 * initially generated by NetBeans.
 * 
 * @author kxg708
 */

public class App extends Application {
    /**
     * The list of aliments which can be accessed globally. it is taken from
     * the data file.
     */
    public static List<Aliment> aliments = new ArrayList<>();
    
    /**
     * The list of user liked aliments which can be accessed globally.
     */
    public static ObservableList<Aliment> likes = FXCollections.observableArrayList();
    
    /**
     * The list of user disliked aliments which can be accessed globally.
     */
    public static ObservableList<Aliment> dislikes = FXCollections.observableArrayList();
    

    /**
     * A method which starts the JavaFX GUI application. It is internally called
     * by launch() in Main.main(). It first reads the aliment.data file and then
     * displays the starting window of the program.
     * 
     * @param stage JavaFX stage.
     * @throws IOException in case errors occur.
     */
    @Override
    public void start(Stage stage) throws IOException {
        FileManager.readAlimentDataFile();

        FXMLLoader loader = getWindow("startingWindow");
        Scene scene = new Scene(loader.load()); 
        StartingWindowController controller = loader.getController();
        controller.injectStage(stage);
        stage.setScene(scene);
        stage.show();
    }

    /**
     * Method which takes in an FXML file name and returns the FXMLLoader object
     * of that file.
     * 
     * @param fxmlName the FXML file name.
     * @return FXMLLoader object for the specified file. 
     * @throws IOException in case errors occur
     */
    public static FXMLLoader getWindow(String fxmlName) throws IOException {
        FXMLLoader fxmlLoader = new FXMLLoader(App.class.getResource("fxml/" + fxmlName + ".fxml"));
        return fxmlLoader;
    }
}